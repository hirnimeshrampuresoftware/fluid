name: Github Actions

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  staticcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dominikh/staticcheck-action@v1

  lint:
    runs-on: ubuntu-latest
    env:
      GOPATH: ${{ github.workspace }}
      GO111MODULE: auto
    defaults:
      run:
        working-directory: ${{ env.GOPATH }}/src/github.com/fluid-cloudnative/fluid
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: ${{ env.GOPATH }}/src/github.com/fluid-cloudnative/fluid

      - name: Lint preparation
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.30.0
          arch=$(go env GOARCH)
          os=$(go env GOOS)
          curl -L https://get.helm.sh/helm-v3.7.2-${os}-${arch}.tar.gz | tar -xz -C /tmp
          chmod u+x /tmp/${os}-${arch}/helm && sudo mv /tmp/${os}-${arch}/helm /usr/local/bin/helm

      - name: CRD validation check
        run: |
          make update-crd
          git status --porcelain
          if [ -z "`git status --porcelain`" ]; then echo "CRD validation passed."; else echo "CRD validation failed. Please use 'make update-crd' to keep CRDs latest"; exit 1; fi

      - name: Project lint
        run: |
          golangci-lint run --timeout=10m
          test -z "$(go fmt ./... 2>/dev/null | tee /dev/stderr)" || (echo "please format Go code with 'gofmt'")
          go vet ./...
          find ./charts | grep Chart.yaml | xargs dirname | xargs helm lint

  build:
    env:
      GOPATH: ${{ github.workspace }}
      GO111MODULE: auto
      CI_TEST_FLAGS: -race -coverprofile=coverage.txt -covermode=atomic
    defaults:
      run:
        working-directory: ${{ env.GOPATH }}/src/github.com/fluid-cloudnative/fluid
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17
    
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        path: ${{ env.GOPATH }}/src/github.com/fluid-cloudnative/fluid

    - name: CI Preparation
      run: |
        arch=$(go env GOARCH)
        os=$(go env GOOS)
        curl -L https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.3.1/kubebuilder_2.3.1_${os}_${arch}.tar.gz | tar -xz -C /tmp/
        sudo mv /tmp/kubebuilder_2.3.1_${os}_${arch} /usr/local/kubebuilder
        export PATH=$PATH:/usr/local/kubebuilder/bin

    - name: CI script
      run: |
        make build
        make test
        echo $(git status --porcelain | grep generated)
        if [ -z "$(git status --porcelain | grep generated)" ]; then echo "openapi validation passed."; else echo "openapi validation failed. Please use 'make build' to update openapi"; exit 1; fi
        bash <(curl -s https://codecov.io/bash)

  aarch64_build:
    strategy:
      fail-fast: false
    env:
      GOPATH: ${{ github.workspace }}
      GO111MODULE: auto
      CI_TEST_FLAGS: -race -coverprofile=coverage.txt -covermode=atomic
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17    
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up QEMU        
      id: qemu
      uses: docker/setup-qemu-action@v1
    - name: build
      run: |
            docker run --rm -v ${{ github.workspace }}:/io:rw --workdir=/io \
            arm64v8/ubuntu \
            bash -exc 'rm -rf /usr/local/go && tar -C /usr/local -xzf go1.19.4.linux-arm64.tar.gz && \
            export PATH=$PATH:/usr/local/go/bin && \
            go version && \
            arch=$(go env GOARCH) && \
            os=$(go env GOOS) && \
            curl -L https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.3.1/kubebuilder_2.3.1_${os}_${arch}.tar.gz | tar -xz -C /tmp/ && \
            sudo mv /tmp/kubebuilder_2.3.1_${os}_${arch} /usr/local/kubebuilder && \
            export PATH=$PATH:/usr/local/kubebuilder/bin && \
            make build && \
            make test && \
            echo $(git status --porcelain | grep generated) && \
            if [ -z "$(git status --porcelain | grep generated)" ]; then echo "openapi validation passed."; else echo "openapi validation failed. Please use make build to update openapi"; exit 1; fi && \
            bash <(curl -s https://codecov.io/bash)'
